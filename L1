(* TODO: arrumar raise *)


(*
    C-Num    ok
    C-Bool   ok
    C-Sum    ok
    C-Eq     ok
    C-If     ok
    C-Id     ok
    C-App    ok
    C-Fn     ok
    C-Let    ok
    C-LetR   
    C-Nil    ok
    C-Cons   ok
    C-Hd
    C-Tl
    C-Isempty
    C-Raise
    C-Try

*)



type variable = string

type operator = Sum | Diff | Mult | Div | Eq | Leq | Not | And | Or 

type tipo  = TyInt | TyBool | TyFn of tipo * tipo | TyIntList | TyBoolList | TyFnList | TyEmpty | Raise

type expr = Num of int
          | Bool of bool
          | Bop of operator * expr * expr
          | If of expr * expr * expr
          | Var of variable
          | App of expr * expr
          | Lam of variable * tipo * expr
          | Let of variable * tipo * expr * expr
          | Lrec of variable * tipo * tipo * variable * tipo * expr * expr
          | Nil                   
          | Cons of expr * expr
          | IsEmpty of expr
          | First of expr
          | Rest of expr
          | Raise
          | TryWith of expr * expr
          | LamI of variable * expr
          | LetI of variable * expr * expr
          | LrecI of variable * variable * expr * expr
          | Uop of operator * expr

type value = Vnum of int
           | Vbool of bool
           | Vclos of variable * expr * env
           | Vrclos of variable * variable * expr * env
           | Vnil                    
           | Vcons of value * value
           | Raise    
and
     env = (variable * value) list

and
     envt = (variable * tipo) list
     
     
     

exception Invalid_input ;;
exception InvalidType ;;
exception InvalidSearch ;;  
exception InvalidLookupT ;;
exception Invalid;;
     
     
let rec exprToString (v:value) : string =
  match v with
  | Vnum(v1)  -> "Num"
  | Vbool(v1) -> "Bool"
  | Vclos (var1, expr1, env1) -> "clos"
  | Vrclos(var1,var2,expr1,env) -> "rclos"
  | Vnil -> "Nil"
  | Vcons(val1, val2) -> "Cons"
  | Raise -> "raise"
;;


let rec typeToString (t:tipo) : string =
  match t with
  | TyInt -> "TyInt"
  | TyBool -> "TyBool"
  | TyFn(t1,t2) -> let t1' = typeToString(t1) in let t2' = typeToString(t2) in "lam("^t1'^"->"^t2'^")"
  | Raise -> "Raise"
  | _ -> failwith "erro_no_matching_de_tipos"
;;

     
              
(* Procura por uma variável no ambiente. Usada no ID *)
let rec search variable env : value = match env with
  | [] -> raise InvalidSearch
  (* tl pega o resto da lista *)
  | (name, v)::tl ->
    if (name == variable)      (* Found the variable in the head *)
    then v                     (* Returns variable value *)
else search variable tl ;; (* Look for it in the tale *)  



(* Função para procurar uma variável no sistema de tipos *)
let rec lookupT variable context : tipo = match context with
  | [] -> raise InvalidLookupT
  | (name, v)::tl ->
    if (name == variable)        
    then v                      
else lookupT variable tl ;; 


(* Declaração de exceções *)

     

(* AVALIADOR BIG STEP *)
(* context do tipo env, e do tipo expr *)
let rec eval context e  = ( match e with
    
    Num(n) -> Vnum(n)
    | Bool(b) -> Vbool(b)
    
    (*  op ∈ {+, −, ∗, div, ==, and, or, not}  *)
    | Bop(op, e1, e2) -> (
        let exp1 = eval context e1 in
        let exp2 = eval context e2 in (
            match(op, exp1, exp2) with
              (Sum, Vnum n1, Vnum n2) -> Vnum(n1 + n2)
            | (Diff, Vnum n1, Vnum n2) -> Vnum(n1 - n2)
            | (Mult, Vnum n1, Vnum n2) -> Vnum(n1 * n2)
            | (Div, Vnum n1, Vnum n2) -> if n2 != 0 then Vnum(n1 / n2) else Raise
            | (Eq, Vnum n1, Vnum n2) -> Vbool(n1 == n2)
            | (And, Vbool b1, Vbool b2) -> Vbool(b1 && b2)
            | (Or, Vbool b1, Vbool b2) -> Vbool(b1 || b2)
            | (_, Raise, _) -> Raise
            | (_, _, Raise) -> Raise
            | _ -> failwith "binary_op_error"
        )
    )
    
    | Uop (op, e) -> (
        let exp1 = eval context e in(
            match (op, exp1) with
                (Not, Vbool b) -> Vbool(not(b))
              | (_, Raise) -> Raise
              | _ -> failwith "unary_op_error"
        )
    )
    
    (* if *)
    | If(e1, e2, e3) -> (
        let exp1 = eval context e1 in (
            match exp1 with
                (Vbool true) -> eval context e2
                | (Vbool false) -> eval context e3
                | Raise -> Raise
                | _ -> failwith "if_error"
        )
    )
    
     (* BS-NIL *)
    | Nil -> Vnil
   
    
    
    (* C-CONS *)
    | Cons(e1, e2) -> (
        let exp1 = eval context e1 in
        let exp2 = eval context e2 in (
            match (exp1, exp2) with
            | (Raise,_) -> Raise
            | (_,Raise) -> Raise
            | _ -> Vcons(exp1, exp2)
        )
    )
    
    
    (* is empty *)
    | IsEmpty(e) -> (
        let e1 = eval context e in (
            match e1 with
            | Vnil -> (Vbool true)
            | Vcons(v1,v2) -> (Vbool false)
            | Raise -> Raise
            | _ -> failwith "is_empty_error"
        )
    )
    
    (* first  *)
    | First(e) -> (
        let e1 = eval context e in (
            match e1 with
            | Vcons(v1,v2) -> v1
            | Vnil -> Raise
            | Raise -> Raise
            | _ -> failwith "first_error"
        )
    )
    
    
    (* rest *)
    | Rest(e) -> (
        let e1 = eval context e in (
            match e1 with
            | Vcons(v1,v2) -> v2
            | Vnil -> Raise
            | Raise -> Raise
            | _ -> failwith "rest_error"
        )
    )
    
    (* raise *)
    | Raise -> Raise
    
    
    (* TryWith *)
    | TryWith(e1,e2) -> (
        let exp1 = eval context e1 in (
            match exp1 with
            | Raise -> eval context e2
            | _ -> exp1
        )
    )
    
        
    (*BS-Id*)
    | Var(v) -> search v context
    

    (*BS-App*)    
    | App(e1, e2) -> (
        let e1' = eval context e1 in
        let e2' = eval context e2 in (
            match(e1', e2') with
            | (Vclos(x, e, envA), v) -> eval ((x,v)::envA) e
            | (Vrclos(f, x, e, envA), v) -> eval ((x,v)::(f,Vrclos(f,x,e,envA))::envA) e
            | (Raise,_) -> Raise
            | (_,Raise) -> Raise
            | _ -> failwith "app_error"
        )
    )

    (* BS-FN *)
    | Lam(x, t, e) -> Vclos(x, e, context)
    | LamI(x, e) -> Vclos(x, e, context)
    
    (* BS-LET *)
    | Let(x, t, e1, e2) -> let exp1 = (eval context e1) in (
                               match exp1 with
                               | Raise -> Raise
                               | _ -> eval ((x,exp1)::context) e2
                            )
    | LetI(x, e1, e2) -> let exp1 = (eval context e1) in (
                               match exp1 with
                               | Raise -> Raise
                               | _ -> eval ((x,exp1)::context) e2
                         )

    (* BS-LETREC *)
    | Lrec(f,t1,t2,x,t1',e1,e2) -> let rclos = Vrclos(f,x,e1,context) in
                                       eval ((f,rclos)::context) e2
    | LrecI(f,x,e1,e2) -> let rclos = Vrclos(f,x,e1,context) in
                                      eval ((f,rclos)::context) e2

);;



 (* Function to update environment of TYPES *)
  let updateT variable tipo environment : envt = match environment with
  | [] -> [(variable, tipo)]
  | hd::tl -> List.append [(variable,tipo)] environment ;;



(* TypeInfer *)


let rec typecheck context e: tipo = match e with
  (* Values *)
    Num(v)  -> TyInt
  | Bool(b) -> TyBool

  (* Binary operations *)
  | Bop(op,exp1,exp2) ->
    let ope1 = typecheck context exp1 in
    let ope2 = typecheck context exp2 in
    (
        match op, ope1, ope2 with
          Sum, TyInt, TyInt -> TyInt
        | Diff, TyInt, TyInt -> TyInt
        | Mult, TyInt, TyInt -> TyInt
        | Div, TyInt, TyInt -> TyInt
        | Eq, TyBool, TyBool -> TyBool
        | Eq, TyInt, TyInt -> TyBool
        | And, TyBool, TyBool -> TyBool
        | Or, TyBool, TyBool -> TyBool
        | (_, Raise, TyBool) -> TyBool
        | (_, TyBool, Raise) -> TyBool 
        (*| _ -> raise *)
    )
    
  (* Conditional *)
  | If(e1,e2,e3) ->
      let tipoe1 = typecheck context e1 in
      let tipoe2 = typecheck context e2 in
      let tipoe3 = typecheck context e3 in
          if tipoe1 == TyBool && tipoe2 == tipoe3 then tipoe2 else raise Invalid_input
          
  (* FN *)    
  | Lam(variable, t, e) -> TyFn(t, (typecheck (updateT variable t context) e))
  
  (* ID *)
  | Var(v) -> lookupT v context
  
  

  (* Application *)
  | App(e1,e2) ->
    let exp1 = typecheck context e1 in
    let exp2 = typecheck context e2 in
    (match exp1 with
      TyFn(t1,t2) -> (if t1 == exp2
          then t2
          else raise InvalidType)
      |_ -> raise InvalidType)

  (* Let *)
  | Let(variable, t, e1, e2) ->
    let x = typecheck context e1 in
    (if x == t (*if the expression e1 is right (of type t)*)
        then typecheck (updateT variable t context) e2 (*ten the output is of typecheck(e2)*)
        else raise InvalidType)
        
        
  (*C-Nil*)
  | Nil -> TyEmpty
    
    
  (*C-Cons*)
  | Cons(exp1, exp2) ->
    (let t1 = typecheck context exp1 in
     let t2 = typecheck context exp2 in
        if t1 = t2
          then ( match t1 with
            | TyInt -> TyIntList
            | TyBool -> TyBoolList
            | TyFn (t1,t2) -> TyFnList
            | _ -> raise InvalidType)
          else(
              if (t2 = TyEmpty)
                then t1
              else raise InvalidType
              )
    )
    
    

let env = [];;
let num = Num(3) ;;
let t =  Bool(true);;
let f = Bool(false);;
let sum = Bop(Mult, Num(4), Num(5));;
let ou = Bop(And, t, t);;
let var = "variavelInt" ;;
let lam = Lam(var,TyInt,sum);; (* int -> int *)
let currentEnv = updateT (var) (TyInt) (env);;
let testeIf = If((t,t,f));;
let app = App(lam,num) ;;
let varBool = "variavelBool";;
let envBool = updateT (varBool) (TyBool) (env);;
let testeLet = Let(varBool, TyBool, testeIf, sum);;


(*let testeLetRec = Lrec(varBool, TyInt,TyInt,varBool,TyInt,sum,sum);;*)


Printf.printf "If((t,t,f)):  %s" (typeToString (typecheck [] testeIf)) ;;
print_newline();;
Printf.printf "Lam(var, TyInt, sum ): %s" (typeToString (typecheck currentEnv lam)) ;; 
print_newline();;
Printf.printf "App(Lam(variavelInt, TyInt, sum, num)): %s" (typeToString (typecheck currentEnv app)) ;; 
print_newline();;
Printf.printf "Let(variavelBool, TyBool, testeIf, sum): %s" (typeToString (typecheck envBool testeLet)) ;;
print_newline();;
Printf.printf "Id(variavelInt): %s" (typeToString (typecheck (currentEnv) (Var(var)))) ;;



(*print_newline();;
Printf.printf "Lrec(variavelBool, (TyInt,TyInt), (varBool,TyInt,sum), sum): %s" (typeToString (typecheck envBool testeLetRec)) ;; *)

