type variable = string

type operator = Sum | Diff | Mult | Div | Eq | Leq | Not | And | Or 

type tipo  = TyInt | TyBool | TyFn of tipo * tipo | TyList of tipo 

type expr = Num of int
          | Bool of bool
          | Bop of operator * expr * expr
          | If of expr * expr * expr
          | Var of variable
          | App of expr * expr
          | Lam of variable * tipo * expr
          | Let of variable * tipo * expr * expr
          | Lrec of variable * tipo * tipo * variable * tipo * expr * expr
          | Nil                   
          | Cons of expr * expr
          | IsEmpty of expr
          | First of expr
          | Rest of expr
          | Raise
          | TryWith of expr * expr
          | LamI of variable * expr
          | LetI of variable * expr * expr
          | LrecI of variable * variable * expr * expr
          | Uop of operator * expr

type value = Vnum of int
           | Vbool of bool
           | Vclos of variable * expr * env
           | Vrclos of variable * variable * expr * env
           | Vnil                    
           | Vcons of value * value
           | Raise    
and
     env = (variable * value) list

and
     tenv = (variable * tipo) list
     
     
     
     
let rec exprToString (v:value) : string =
  match v with
  | Vbool(v1) -> "Bool"
  | Vnum(v1)  -> "Num"
  | Vclos (var1, expr1, env1) -> "clos"
  | Vrclos(var1,var2,expr1,env) -> "rclos"
  | Vnil -> "Nil"
  | Vcons(val1, val2) -> "Cons"
  | Raise -> "raise"
;;

     
              
(* Procura por uma variável no ambiente. Usada no ID *)
let rec search variable env : value = match env with
  | [] -> raise Not_found
  (* tl pega o resto da lista *)
  | (name, v)::tl ->
    if (name == variable)      (* Found the variable in the head *)
    then v                     (* Returns variable value *)
else search variable tl ;; (* Look for it in the tale *)     
     
     
     

(* AVALIADOR BIG STEP *)
(* context do tipo env, e do tipo expr *)
let rec eval (context : env) (e : expr) = ( match e with
    
    Num(n) -> Vnum(n)
    | Bool(b) -> Vbool(b)
    
    (*  op ∈ {+, −, ∗, div, ==, and, or, not}  *)
    | Bop(op, e1, e2) -> (
        let exp1 = eval context e1 in
        let exp2 = eval context e2 in (
            match(op, exp1, exp2) with
              (Sum, Vnum n1, Vnum n2) -> Vnum(n1 + n2)
            | (Diff, Vnum n1, Vnum n2) -> Vnum(n1 - n2)
            | (Mult, Vnum n1, Vnum n2) -> Vnum(n1 * n2)
            | (Div, Vnum n1, Vnum n2) -> if n2 != 0 then Vnum(n1 / n2) else Raise
            | (Eq, Vnum n1, Vnum n2) -> Vbool(n1 == n2)
            | (And, Vbool b1, Vbool b2) -> Vbool(b1 && b2)
            | (Or, Vbool b1, Vbool b2) -> Vbool(b1 || b2)
            | (_, Raise, _) -> Raise
            | (_, _, Raise) -> Raise
            | _ -> failwith "binary_op_error"
        )
    )
    
    | Uop (op, e) -> (
        let exp1 = eval context e in(
            match (op, exp1) with
                (Not, Vbool b) -> Vbool(not(b))
              | (_, Raise) -> Raise
              | _ -> failwith "unary_op_error"
        )
    )
    
    (* if *)
    | If(e1, e2, e3) -> (
        let exp1 = eval context e1 in (
            match exp1 with
                (Vbool true) -> eval context e2
                | (Vbool false) -> eval context e3
                | Raise -> Raise
                | _ -> failwith "if_error"
        )
    )
    
     (* C-NIL *)
    | Nil -> Vnil
   
    
    
    (* C-CONS *)
    | Cons(e1, e2) -> (
        let exp1 = eval context e1 in
        let exp2 = eval context e2 in (
            match (exp1, exp2) with
            | (Raise,_) -> Raise
            | (_,Raise) -> Raise
            | _ -> Vcons(exp1, exp2)
        )
    )
    
    
    (* is empty *)
    | IsEmpty(e) -> (
        let e1 = eval context e in (
            match e1 with
            | Vnil -> (Vbool true)
            | Vcons(v1,v2) -> (Vbool false)
            | Raise -> Raise
            | _ -> failwith "is_empty_error"
        )
    )
    
    (* first  *)
    | First(e) -> (
        let e1 = eval context e in (
            match e1 with
            | Vcons(v1,v2) -> v1
            | Vnil -> Raise
            | Raise -> Raise
            | _ -> failwith "first_error"
        )
    )
    
    
    (* rest *)
    | Rest(e) -> (
        let e1 = eval context e in (
            match e1 with
            | Vcons(v1,v2) -> v2
            | Vnil -> Raise
            | Raise -> Raise
            | _ -> failwith "rest_error"
        )
    )
    
    (* raise *)
    | Raise -> Raise
    
    
    (* TryWith *)
    | TryWith(e1,e2) -> (
        let exp1 = eval context e1 in (
            match exp1 with
            | Raise -> eval context e2
            | _ -> exp1
        )
    )
    
        
    (*BS-Id*)
    | Var(v) -> search v context
    

    (*BS-App*)    
    | App(e1, e2) -> (
        let e1' = eval context e1 in
        let e2' = eval context e2 in (
            match(e1', e2') with
            | (Vclos(x, e, envA), v) -> eval ((x,v)::envA) e
            | (Vrclos(f, x, e, envA), v) -> eval ((x,v)::(f,Vrclos(f,x,e,envA))::envA) e
            | (Raise,_) -> Raise
            | (_,Raise) -> Raise
            | _ -> failwith "app_error"
        )
    )

    (* BS-FN *)
    | Lam(x, t, e) -> Vclos(x, e, context)
    | LamI(x, e) -> Vclos(x, e, context)
    
    (* BS-LET *)
    | Let(x, t, e1, e2) -> let exp1 = (eval context e1) in (
                               match exp1 with
                               | Raise -> Raise
                               | _ -> eval ((x,exp1)::context) e2
                            )
    | LetI(x, e1, e2) -> let exp1 = (eval context e1) in (
                               match exp1 with
                               | Raise -> Raise
                               | _ -> eval ((x,exp1)::context) e2
                         )

    (* BS-LETREC *)
    | Lrec(f,t1,t2,x,t1',e1,e2) -> let rclos = Vrclos(f,x,e1,context) in
                                       eval ((f,rclos)::context) e2
    | LrecI(f,x,e1,e2) -> let rclos = Vrclos(f,x,e1,context) in
                                      eval ((f,rclos)::context) e2

)


let expBopSum = eval []  (If(IsEmpty((Cons (Num(5), Nil))),Bool(true),Num(2)));;
let x = exprToString(expBopSum);;
Printf.printf "%s" x;;
